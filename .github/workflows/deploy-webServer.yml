name: Deploy WebService Infrastructure with Terraform, Ansible, and Cloudflare

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      CLOUDFLARE_DOMAIN: ${{ secrets.CLOUDFLARE_DOMAIN }}
      CLOUDFLARE_RECORD_NAME: ${{ secrets.CLOUDFLARE_RECORD_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Azure CLI Login
        run: |
          az login --service-principal \
            --username $ARM_CLIENT_ID \
            --password $ARM_CLIENT_SECRET \
            --tenant $ARM_TENANT_ID

      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: 1.6.0

      # - name: Terraform Init & Apply
      #   working-directory: WebService/terraform
      #   run: |
      #     terraform init
      #     terraform apply -auto-approve

      - name: Get Public IP of Load Balancer
        id: lb_ip
        run: |
          ip=$(az network public-ip show \
            --resource-group rg-nginx-setup \
            --name lb-public-ip \
            --query "ipAddress" -o tsv)
          echo "lb_ip=$ip" >> $GITHUB_OUTPUT


      - name: Prepare Ansible Inventory
        run: |
          mkdir -p WebService/ansible/inventory
          envsubst < WebService/ansible/inventory/hosts.yml > WebService/ansible/inventory/rendered_hosts.yml
        env:
          lb_ip: ${{ steps.lb_ip.outputs.lb_ip }}

      # - name: Create A record in Cloudflare
      #   run: |
      #     curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
      #     -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
      #     -H "Content-Type: application/json" \
      #     --data '{
      #       "type":"A",
      #       "name":"'"$CLOUDFLARE_RECORD_NAME"'",
      #       "content":"${{ steps.lb_ip.outputs.lb_ip }}",
      #       "ttl":120,
      #       "proxied":false
      #     }'

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Run Ansible to configure NGINX
        run: |
          ansible-playbook WebService/ansible/playbooks/setup_nginx.yml \
            -i WebService/ansible/inventory/rendered_hosts.yml \
            --extra-vars "lb_ip=${{ steps.lb_ip.outputs.lb_ip }}" \
             -e 'ansible_ssh_common_args="-o StrictHostKeyChecking=no"'

      # - name: Deallocate VM1
      #   run: az vm deallocate --name vm-nginx-1 --resource-group rg-nginx-setup

      # - name: Setup SSL on VM0
      #   run: |
      #     ansible-playbook WebService/ansible/playbooks/setup_ssl.yml \
      #       -i WebService/ansible/inventory/rendered_hosts.yml \
      #       --limit vm-nginx-0 \
      #       --extra-vars "lb_ip=${{ steps.lb_ip.outputs.lb_ip }}" \
      #        -e 'ansible_ssh_common_args="-o StrictHostKeyChecking=no"'

      # - name: Deallocate VM0
      #   run: az vm deallocate --name vm-nginx-0 --resource-group rg-nginx-setup

      # - name: Start VM1
      #   run: az vm start --name vm-nginx-1 --resource-group rg-nginx-setup

      - name: Setup SSL on VM1
        run: |
          ansible-playbook WebService/ansible/playbooks/setup_ssl.yml \
            -i WebService/ansible/inventory/rendered_hosts.yml \
            --limit vm-nginx-1 \
            --extra-vars "lb_ip=${{ steps.lb_ip.outputs.lb_ip }}" \
             -e 'ansible_ssh_common_args="-o StrictHostKeyChecking=no"'

      - name: Start VM0
        run: az vm start --name vm-nginx-0 --resource-group rg-nginx-setup
